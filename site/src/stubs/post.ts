export const postStub = {
  type: 'General',
  tags: ['zkLLVM'],
  title: 'Must-Listen Marketing Podcasts for Interior Designers',
  subtitle: '=nil; Foundation solutions to streamline zk Proof generation process',
  author: 'Ivan Karpeev',
  date: '26 Apr 2023',
  content:
    '<h2>Introduction</h2><p>The world is currently witnessing a surge of interest in zero-knowledge (zk) proofs, as they hold the potential to address privacy and scalability challenges for <a herf="#">Ethereum and other</a> Layer 1 protocols. As with any emerging technology, the buzz around zk proofs can easily captivate audiences, while practical implementation strategies remain underexplored.</p><p>In this post, we aim to bring the focus back to the practical aspects by shedding light on the =nil; pipeline for efficient zk proof generation. This will enable developers to readily integrate zk proofs into their products today.</p><h2>Why we already love zk proofs</h2><p>Although zk technology was introduced relatively recently, its capabilities are already providing benefits to the industry and putting some promising use cases on a realistic timeline for further development:</p><ol><li>zkRollups help reduce transaction costs by moving them outside of Ethereum, while increasing transaction throughput for protocols and maintaining reasonable transaction processing times.</li><li>zkBridging offers a solution for securing cross-protocol transactions, preventing multi-million-dollar frauds that have occurred due to reliance on optimistic security algorithms.</li><li>As the number of applications requiring in-EVM data computations grows, zkOracles that supply data validated by zk proofs are gaining popularity, ensuring that decisions are based on accurate and up-to-date information.</li><li>The algorithms behind machine learning solutions may become more transparent, with the ability to prove their training and ongoing execution using zk proofs, as long as there’s nothing to hide, of course</li><li>zkGaming enables the validation of user achievements by implementing zk proofs at critical stages of the gaming process. These achievements can then be proven to a wider audience beyond the specific game.</li></ol><p>Each of these use cases is either experiencing intense competition among recently established companies or a race to be the first to introduce a product that meets market expectations. While there may be several factors delaying the emergence of a winner in both scenarios, mastering a zk product logically faces the harsh realities of zk technology itself.</p><h2>The effort required to implement zk proofs</h2><p>We understand that implementing zk technology is no walk in the park. Whether it’s Mina state proofs, Solana consensus proofs, or any other use case you’d like to tackle with this technology, the implementation is far more challenging than writing this blog post (no offense, marketing team).</p><p>Based on our experience in this field, we can identify two main obstacles associated with enabling an application to use zk proofs:</p><ol><li>In addition to the ongoing computational costs for generating proofs, significant infrastructure investments are necessary to start implementing zk technology, which limits its adoption within the developer community.</li><li>Even with ample funding, the implementation of zk proofs for each specific use case can be intricate, potentially taking years to establish the processes behind the scenes. This further discourages developers from pursuing this technology.</li></ol><p>However, you’re here for practical insights, not just another “expert” blog post. With that in mind, the =nil; Foundation is excited to present a solution pipeline for the efficient implementation of zk proofs for your use case.</p><img src="/images/draft/stub-img-1.jpg" alt="blog-item"><h5>Image caption</h5><h2>zkProofs as a commodity you can buy and sell</h2><p>Until now, any developer aiming to implement proof-based computation compression had to set up expensive hardware infrastructure and ensure its efficient workload. We believe that instead of investing time and resources, it would be much simpler to access a network of suppliers ready to offer their services. Since each proof received can be validated, the interactions between requesters and proof generators can be established through a traditional marketplace model. Introducing Proof Market!</p><p>By providing access to a distributed network of proof generators for both established players and small developers via the first decentralized marketplace, Proof Market brings the advantages of market dynamics to the proof generation process. This means that as soon as a decision can be made to acquire a proof at a lower cost or in less time, Proof Market opens up new opportunities for all parties involved:</p><ul><li>Requesters can optimize the proof generation process, balancing between cost and time requirements for each specific use case.</li><li>Proof generators can obtain a market valuation of their computational power and its application within a specific protocol.</li><li>An open market for proof generation presents the opportunity to gain new market insights that may influence parties’ behavior and supply/demand decisions on the platform.</li></ul><p>While Proof Market addresses the infrastructure problem for proof generation, the challenge of initially implementing zk technology into an application and defining a proof statement for further generation by a proof producer remains — the most difficult part. But don’t worry, we have a solution for that too!</p><h2>Streamlining zk-enabled Ethereum apps with zkLLVM</h2><p>Traditionally, when building a zk-enabled Ethereum application, developers had to learn domain-specific languages (DSLs) to implement into the application code and manually define proof statements, also known as circuits, for further proof generation. This made zk implementation a non-trivial task, consuming significant developer resources and prolonging the time it took to launch a zk-enabled app.</p><p>Requiring developers to acquire deep, zk-specific knowledge for technology implementation presents a high barrier to ensuring widespread adoption. To save time, developers can now utilize zkLLVM — a circuit compiler that transforms applications written in C++, Rust, JavaScript, or other mainstream development languages into zk apps.</p><p>zkLLVM converts computations written in mainstream development languages into circuits for further proof generation, which can be verified by Ethereum. Instead of spending months exploring a complex new domain, developers can now benefit from automatically defined, high-quality circuits built on top of code they are already confident in. With no further manual maintenance of circuits defined by zkLLVM, developers are protected from endless optimization in the event of future protocol changes that may impact manually built circuits.</p><p>As a game changer for the widespread adoption of zk technology, zkLLVM seamlessly integrates with Proof Market to support the advantages of decentralized proof generation. Not only does this relieve proof requesters from the burden of technology exploration, but it also benefits proof generators who enjoy improved circuit quality and performance. This enables them to use less computational power for the same amount of computations to be proven, compared to inefficient circuits developed manually.</p><p>As a game changer for the widespread adoption of zk technology, zkLLVM seamlessly integrates with Proof Market to support the advantages of decentralized proof generation. Not only does this relieve proof requesters from the burden of technology exploration, but it also benefits proof generators who enjoy improved circuit quality and performance. This enables them to use less computational power for the same amount of computations to be proven, compared to inefficient circuits developed manually.</p><img src="/images/draft/stub-img-2.jpg" alt="blog-item"><h5>Image caption</h5><h2>Making zk proofs accessible for everyone</h2><p>Together, Proof Market and zkLLVM introduce an effective pipeline that simplifies the process of implementing zk proofs, enabling both established companies and small developers to benefit from this powerful technology. Proof Market serves as the first platform for proof generators to gauge market demand for their computational power, while zkLLVM simplifies the process of incorporating zk proofs into applications.</p><p>If you have any questions regarding Proof Market or the specific application of zkLLVM, please don’t hesitate to reach out to us on Discord or Telegram. We value your interest and encourage you to share your questions.</p><p>Be sure to follow us on Twitter to stay informed about our latest updates — and trust us, there are plenty more to come.</p><p>Thank you!</p><a>Official repository</a> <a>zkLLVM documentation</a>',
}
